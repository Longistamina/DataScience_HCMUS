colors_new <- colors[c(-2, -4)]
print(colors_new)
clear
# Create two vectors
v1 <- c(5, 7, 4, 8, 0, 11)
v2 <- c(4, 10, 2, 8, 1, 2)
# Addition
print(v1 + v2)
# Subtraction
print(v1 - v2)
# Multiplication (element-wise)
print(v1 * v2)
# Division (element-wise)
print(v1 / v2)
# Dot product (tich vo huong)
print(dot(v1, v2))
# Dot product (tich vo huong)
library(geometry)
print(v1 %*% v2)
#-----------------------------------------------------#
#--------------- Arithmetic Operators ----------------#
#-----------------------------------------------------#
v <- c(2, 5.5, 6)
t <- c(8, 3, 4)
# + plus
print(v+t)
# - subtract
print(v-t)
# * multiply
print(v*t)
# / divide
print(v/t)
# %% modulo - get the remainder
print(v%%t)
# %/% quotient - get the integer division
print(v%/%t)
# ^ exponential
print(v^t)
# %/% dot product (tich vo huong)
print(v %*% t)
v3 <- c(5, 7, 4, 8, 0, 11)
v4 <- c(4, 10)
print(v3 + v4)
v3 <- c(1, 2, 3)
v4 <- c(4, 10)
print(v3 + v4)
v3 <- c(1, 2, 3)
v4 <- c(4, 10)
print(v3 + v4)
# Sort numeric vector
v <- c(1, 2, 5, -10, 7, -6, 9)
v_asc = sort(v) #Default is ascending sort
print(v_asc)
v_desc = sort(v, decreasing = TRUE) #Descending sort
print(v_desc)
# Sort character vector
colors <- c("red", "green", "blue", "brown", "magenta", "violet", "turquoise")
colors_asc = sort(colors) #Default is A-Z sort
print(colors_asc)
colors_desc = sort(colors, decreasing = TRUE) #Z-A sort
print(colors_desc)
print(colors)
colors <- c("red", "green", "blue")
print(colors)
#Add new element at positin length(vector) + 1
colors[length(colors)+1] = "brown"
print(colors)
friends_vector <- c("Andy", "Bacon", "Cindy")
repeat {
len_friends = lenght(friends_vector)
new_friend = readline(prompt = "Input the name of a new friend: ")
friends_vector[len_friends + 1] = new_friend
i <- readline(prompt = "Continue: 1, Stop: others")
print()
if (i != "1") {
break
}
}
repeat {
len_friends = length(friends_vector)
new_friend = readline(prompt = "Input the name of a new friend: ")
friends_vector[len_friends + 1] = new_friend
i <- readline(prompt = "Continue: 1, Stop: others")
print()
if (i != "1") {
break
}
}
repeat {
len_friends = length(friends_vector)
new_friend = readline(prompt = "Input the name of a new friend: ")
friends_vector[len_friends + 1] = new_friend
i <- readline(prompt = "Continue: 1, Stop: others ___ Your choice: ")
print("")
if (i != "1") {
break
}
}
repeat {
len_friends = length(friends_vector)
new_friend = readline(prompt = "Input the name of a new friend: ")
friends_vector[len_friends + 1] = new_friend
i <- readline(prompt = "Continue: 1, Stop: others ___ Your choice: ")
cat("")
if (i != "1") {
break
}
}
repeat {
len_friends = length(friends_vector)
new_friend = readline(prompt = "Input the name of a new friend: ")
friends_vector[len_friends + 1] = new_friend
i <- readline(prompt = "Continue: 1, Stop: others ___ Your choice: ")
cat(" ")
if (i != "1") {
break
}
}
cat("There are ", len_friends, " in your friend list.\n",
"They are: ", friends_vector, sep = "")
?paste()
cat("There are ", len_friends, " in your friend list.",
"\nThey are: ", paste(friends_vector, sep = "; "), sep = "")
cat("There are ", len_friends, " in your friend list.",
"\nThey are: ", paste(friends_vector, sep = "; "), sep = "")
paste(friends_vector, sep = "; ")
paste(month.abb, "is the", nth, "month of the year.", sep = "_*_")
cat("There are ", len_friends, " in your friend list.",
"\nThey are: ", paste(friends_vector, collapse = "; "), sep = "")
friends_vector <- c("Andy", "Bacon", "Cindy")
len_friends <- 0
repeat {
len_friends = length(friends_vector)
new_friend = readline(prompt = "Input the name of a new friend: ")
friends_vector[len_friends + 1] = new_friend
i <- readline(prompt = "Continue: 1, Stop: others ___ Your choice: ")
cat(" ")
if (i != "1") {
break
}
}
cat("There are ", len_friends, " in your friend list.",
"\nThey are: ", paste(friends_vector, collapse = ", "), sep = "")
gender <- c("Male", "Female", "Female", "Male", "Female", "Male")
print(gender)
is.factor(gender) #FALSE
gender_factor <- factor(gender)
print(gender_factor)
is.factor(gender_factor) #TRUE
# Factor: is an R object that stores data as level
# it facilitates classification tasks
# Factor has level, ascending for numeric or A-Z for character
# factor(vector)
gender <- c("Male", "Female", "Female", "Male", "Female", "Male")
is.factor(gender) #FALSE
print(gender)
gender_factor <- factor(gender)
is.factor(gender_factor) #TRUE
print(gender_factor)
print(nlevels(gender_factor)) #nlevels() to get the number of levels of a factor
gender <- c("Male", "Female", "Female", "Male", "Female", "Male")
gender_factor <- factor(gender, levels = c("Male", "Female"))
print(gender_factor)
?gl()
colors_factor <- gl(n = 3, k = 2, labels = c("red", "green", "blue"))
print(colors_factor)
?levels
x <- c(1, 2, 3, 3, 5, 3, 2, 4, NA, 11, 22, 47, 47, 11, 47, 11)
print(x)
x_factor <- factor(x)
print(x_factor)
print(levels(x_factor))
print(nlevels(x_factor))
# Matrix is a 2D object storing homogeneous data (same datatype)
# It is usually used to store numeric data
M1 <- matrix(c(1:12), nrow = 4, ncol = 3, byrow = TRUE)
print(M1)
### byrow = FALSE ###
M2 <- matrix(c(1:12), nrow = 4, ncol = 3, byrow = FALSE)
print(M2)
rownames = c("row1", "row2", "row3", "row4")
colnames = c("col1", "col2", "col3")
M3 <- matrix(c(1:12), nrow = 4, ncol = 3, dimnames = list(rownames, colnames))
print(M3)
rownames = c("row1", "row2", "row3", "row4")
colnames = c("col1", "col2", "col3")
m <- matrix(c(1:12), nrow = 4, ncol = 3, dimnames = list(rownames, colnames))
# Access element at 1st row and 3rd column
m[1,3]
# Access all elements of 2nd row
m[2,]
# Access all elements of 3rd column
m[,3]
rownames = c("row1", "row2", "row3", "row4")
colnames = c("col1", "col2", "col3")
m <- matrix(c(1:12), nrow = 4, ncol = 3, dimnames = list(rownames, colnames))
print(m)
# Access element at 1st row and 3rd column
m[1,3]
# Access all elements of 2nd row
m[2,]
# Access all elements of 3rd column
m[,3]
# Access first 2 rows of 3rd column
m[1:2,3]
#
m[m[1,] > 3]
m[m[,3] > 3]
?c
example(c)
M1 <- matrix(1:15:2, nrow = 2, byrow = TRUE)
print(M1)
M2 <- matrix(0:14:2, nrow = 2, byrow = TRUE)
print(M2)
# Add
print(M1+M2)
#----------------------------------------------------#
#---------- same dimension calculations -------------#
#----------------------------------------------------#
M1 <- matrix(seq(1,5,2), nrow = 2, byrow = TRUE)
print(M1)
M2 <- matrix(seq(0,14,2), nrow = 2, byrow = TRUE)
print(M2)
# Add
print(M1+M2)
clear
#----------------------------------------------------#
#---------- same dimension calculations -------------#
#----------------------------------------------------#
M1 <- matrix(seq(1,15,2), nrow = 2, byrow = TRUE)
print(M1)
M2 <- matrix(seq(0,14,2), nrow = 2, byrow = TRUE)
print(M2)
# Add
print(M1+M2)
# Subtract
print(M1-M2)
# Multiply element-wise (not dot product)
print(M1*M2)
# Divide element-wise (not multiply the inverse matrix)
print(M1 / M2)
mat1 <- matrix(c(1:12), ncol = 4)
mat2 <- matrix(c(1:8), nrow = 4)
print(mat1)
print(mat2)
# dot product
print(mat1 %*% mat2)
mat1 <- matrix(c(1:12), ncol = 4) # 3x4
mat2 <- matrix(c(1:8), nrow = 4)  # 4x2
print(mat1)
print(mat2)
# dot product matrix - matrix
print(mat1 %*% mat2) # 3x2
# dot product matrix - vector
vec <- c(1:3)
print(vec)
print(dim(vec))
print(vec %*% mat1)
?dim()
v1 <- c(1, 2, 3)
v2 <- c(4, 5, 6)
v3 <- c(7, 8, 9)
M3 <- c(v1, v2, v3)
print(M3)
### create vector from matrix
v1 <- c(1, 2, 3)
v2 <- c(4, 5, 6)
v3 <- c(7, 8, 9)
M3 <- matrix(c(v1, v2, v3), nrow = 3, byrow = TRUE)
print(M3)
?t
mat <- matrix(c(1:10), nrow = 2, byrow = FALSE)
print(mat)
# t(matrix) to transpose matrix m.n => n.m
print(t(mat))
print(mat %*% t(mat))
#------------ transpose -------------#
#------------------------------------#
mat <- matrix(c(1:10), nrow = 2, byrow = FALSE)
print(mat)
print(dim(mat)) #dim() to check dimension
# t(matrix) to transpose matrix m.n => n.m
print(t(mat))
print(dim(t(mat)))
# matrix %*% t(matrix) always results in a square matrix
print(mat %*% t(mat))
print(dim(mat %*% t(mat)))
mat <- matrix(c(1:10), nrow = 2, byrow = FALSE)
print(mat)
# dim() returns dimension
dim(mat)
# nrow() returns the number of rows
nrow(mat)
# ncol() returns the number of columns
ncol(mat)
?array()
example("array")
example(array)
v1 <- c(1:6)
v2 <- c(7:15)
arr3D <- array(c(v1, v2), dim = c(3, 4, 2))
print(arr3D)
### 4D array ###
arr4D <- array(1:120, dim = c(2, 3, 4, 5))
print(arr4D)
v1 <- c(1:6)
v2 <- c(7:15)
arr3D <- array(c(v1, v2), dim = c(3, 4, 2)) # dim = 3x4x2
print(arr3D)
rownames <- c("row1", "row2", "row3")
colnames <- c("col1", "col2", "col3", "col4")
matnames <- c("matrix1", "matrix2")
v1 <- c(1:6)
v2 <- c(7:15)
arr3D <- array(c(v1, v2), dim = c(3, 4, 2), dimnames = list(rownames, colnames, matnames))
print(arr3D)
# array_name[row_index, column_index, matrix_index]
v1 <- c(1:6)
v2 <- c(7:15)
arr3D <- array(c(v1, v2), dim = c(3, 4, 2))
print(arr3D)
# Access element at 3rd row, 2nd column, from 1st matrix
arr3D[3, 2, 1]
# Access all elements on 1st row, from 2nd matrix
arr3D[1,,2]
# Access only matrix 2nd
arr3D[,,2]
rownames <- c("row1", "row2", "row3")
colnames <- c("col1", "col2", "col3", "col4")
matnames <- c("matrix1", "matrix2")
v1 <- c(1:6)
v2 <- c(7:15)
arr3D <- array(c(v1, v2), dim = c(3, 4, 2), dimnames = list(rownames, colnames, matnames))
print(arr3D)
###################
# sum row-wise
#
print(apply(arr3D, c(1), sum))
# min column-wise
print(apply(arr3D, c(2), min))
print(apply(arr3D, c(3), mean))
?prod()
example(prod)
1*2*3*4*5*6*7
print(prod(arr3D[,22,2]))
print(prod(arr3D[,2,2]))
# List is a 1D object storing heterogeneous data (different datatypes)
# list()
list_data <- list("hello", "R", 12, 25.5, c(21, 32, 11), TRUE)
print(list_data) #Each element of list is indexed as [[i]], with double brackes
list_mix <- list(c("Red", "Green", "Yellow"), matrix(c(1:8), nrow=2),
list("green", TRUE, 12.5), TRUE)
print(list_mix)
names(list_mix) <- c("Traffic_light", "Matrix", "Inner_list", "Pass")
print(list_mix)
list_mix <- list(c("Red", "Green", "Yellow"), matrix(c(1:8), nrow=2),
list("green", TRUE, 12.5), TRUE)
names(list_mix) <- c("Traffic_light", "Matrix", "Inner_list", "Pass")
print(list_mix[1])
print(list_mix$Matrix)
#---------------------------------------------------------#
#------------ append new element to list -----------------#
#---------------------------------------------------------#
list_append <- list("a", 2, FALSE)
# Append new element
list_append[length(list_append) + 1] = 14.9
print(list_append)
# list[index] = NULL
list_remove <- list("b", 8, TRUE)
list_remove[2] = NULL
print(list_remove)
# list$element_name = NULL
list_mix <- list(c("Red", "Green", "Yellow"), matrix(c(1:8), nrow=2),
list("green", TRUE, 12.5), TRUE)
names(list_mix) <- c("Traffic_light", "Matrix", "Inner_list", "Pass")
list_mix$Traffic_light = NULL
print(list_mix)
list_update <- list(FALSE, "asbc", 2)
list_update[1] = TRUE
print(list_update)
list_1 = list(c("a", "b"), 2)
list_2 = list(TRUE, 14.5)
merge_list = c(list_1, list_2)
print(merge_list)
list_a <- list(1:5)
list_b <- list(6:10)
print(list_a + list_b)
vec_a <- unlist(list_a)
print(vec_a)
vec_b <- unlist(list_b)
print(vec_a + vec_b)
print(unlist(list_a) + unlist(list_b))
list_mix <- list(c("Red", "Green", "Yellow"), matrix(c(1:8), nrow=2),
list("green", TRUE, 12.5), TRUE)
names(list_mix) <- c("Traffic_light", "Matrix", "Inner_list", "Pass")
print(list_mix[1])
print(list_mix$Matrix)
print(list_mix[1][1])
list_mix <- list(c("Red", "Green", "Yellow"), matrix(c(1:8), nrow=2),
list("green", TRUE, 12.5), TRUE)
names(list_mix) <- c("Traffic_light", "Matrix", "Inner_list", "Pass")
print(list_mix[1]) #  "Red"    "Green"  "Yellow"
print(list_mix[1][1])
print(list_mix[[1]][1])
list_mix <- list(c("Red", "Green", "Yellow"), matrix(c(1:8), nrow=2),
list("green", TRUE, 12.5), TRUE)
names(list_mix) <- c("Traffic_light", "Matrix", "Inner_list", "Pass")
print(list_mix[1]) #  "Red"    "Green"  "Yellow"
print(list_mix[[1]][1]) # "Red"
print(list_mix$Matrix)
list_mix <- list(c("Red", "Green", "Yellow"), matrix(c(1:8), nrow=2),
list("green", TRUE, 12.5), TRUE)
names(list_mix) <- c("Traffic_light", "inner_Matrix", "inner_List", "Pass")
print(list_mix[1]) #  "Red"    "Green"  "Yellow"
print(list_mix[[1]][1]) # "Red"
print(list_mix$inner_Matrix) # print out all the inner_Matrix in list
print(list_mix$inner_Matrix[2,3]) # print out 2nd row, 3rd column of inner_Matrix in list
# 6
list_date = list("year"=c(1998, 1999, 2000), "month"=c("Dec", "Nov"), "day"=c(1, 2, 3))
print(list_date)
x <- c(1, 3, 4, 7, 10)
list_cal = list("x"=x, "x*2" = x*2, "x/3" = x/3, "sqrt(x)" = sqrt(x))
print(x)
x <- c(1, 3, 4, 7, 10)
list_cal = list("x"=x, "x*2" = x*2, "x/3" = x/3, "sqrt(x)" = sqrt(x))
print(list_cal)
installed.packages(tidyverse)
install.package(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse"")
``
install.packages("tidyverse")
library(tidyverse)
getwd
getwd()
getwd()
setwd("C:/Users/admin/Documents/Academic/DataScience_HCMUS/7.R_Rstudio/Chap_08_DataFrame_Tidyverse/")
df_pokemon = read_csv("data_chap_08/pokemon.csv")
head(df_pokemon)
# select column 2, 5, 7 and 8
df_pokemon_sub = select(df_pokemon, c(2, 5, 7, 8))
head(df_pokemon_sub)
# using %>%
df_pokemon_sub = df_pokemon %>%
select(c("Name", "Type 1", "Total", "Legendary"))
head(df_pokemon_sub)
?select_if
df_pokemon_sub = df_pokemon %>%
select_if(is.numeric)
head(df_pokemon_sub)
str(df_pokemon_sub)
# Tidyverse is a popular and powerful package in R for data processing and wrangling
# Tidyverse contains also dplyr and ggplot2
# Some main commands in tidyverse:
## arrange()
## filter()
## mutate()
## select()
## summarize()
# output_df <- function(input_df, conditions)
# output_df <- input_df %>%
#     function_1(conditions) %>%
#     function_2(conditions) %>%
#     function_3(conditions) %>%
# install.packages("tidyverse")
library(tidyverse)
setwd("C:/Users/admin/Documents/Academic/DataScience_HCMUS/7.R_Rstudio/Chap_08_DataFrame_Tidyverse/")
#------------------------------------#
#-------- read pokemon.csv ----------#
#------------------------------------#
df_pokemon = read_csv("data_chap_08/pokemon.csv")
head(df_pokemon)
pokemon_500_600 = df_pokemon %>%
filter(500 <= "Total" <= 600)
pokemon_500_600 = df_pokemon %>%
filter(500 <= Total <= 600)
pokemon_500_600 = df_pokemon %>%
filter(("Total" >= 500) & ("Total" <= 600))
head(pokemon_500_600)
pokemon_500_600 = df_pokemon %>%
filter(("Total" >= 500) & ("Total" <= 600))
head(pokemon_500_600)
# install.packages("tidyverse")
library(tidyverse)
setwd("C:/Users/admin/Documents/Academic/DataScience_HCMUS/7.R_Rstudio/Chap_08_DataFrame_Tidyverse/")
#------------------------------------#
#-------- read pokemon.csv ----------#
#------------------------------------#
df_pokemon = read_csv("data_chap_08/pokemon.csv")
head(df_pokemon)
#-------------------------------#
#--------- filter() ------------#
#-------------------------------#
# filter() helps select rows satisfying specific conditions
# filter(input_df, conditon_1, condition_2, ...)
# input_df %>% filter(condition_1, condition_2)
pokemon_500_600 = df_pokemon %>%
filter(("Total" >= 500) & ("Total" <= 600))
head(pokemon_500_600) # No observations
pokemon_500_600 = df_pokemon %>%
filter((Total >= 500) & (Total <= 600))
head(pokemon_500_600) # No observations
## Note: if the column name has space character, then put them in like this `column name` (like SQL)
df_pokemon_grass_poison = df_pokemon %>%
filter((`Type 1` == "Grass") & `Type 2` == "Poison") # must be `Type 1` - NOT "Type 1"
head(df_pokemon_grass_poison)
str(df_pokemon_grass_poison)
# Filter rows where Attack > Defense
df_pokemon_atk_dfs = df_pokemon %>%
filter(Attack > Defense)
head(df_pokemon_atk_dfs)
dim(df_pokemon_atk_dfs)
