import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sbn


#----------------------------------------------------------#
#--------------------- Simple Linear ----------------------#
#----------------------------------------------------------#


df = pd.read_.....

df.describe()

df[['X_col', 'Y_col']].corr()

sbn.regplot(data=df, x='X_col', y='Y_col');

sbn.residplot(df['X_col'], df['Y_col']);


from sklearn.model_selection import train_test_split
x = df[['X_col']] #must be double brackets [[ ]] to make it understand X as a 2D array
y = df['Y_col']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1)



#Import linear regression model module
from sklearn.linear_model import LinearRegression

linreg_simp = LinearRegression()
linreg_simp.fit(x_train, y_train) #train model with train set

#Get the parameters
intercept = linreg_simp.intercept_
slope = linreg_simp.coef_[0]

#y_pred = slope*x + intercept

#Calculate Y_predicted from X_test
y_pred_test = linreg_simp.predict(x_test)


#Calculate the R^2 score by comparing y_pred_test and y_test (true)
linreg_simp.score(x_test, y_test)

linreg_simp.score(x_train, y_train) #score on train set
linreg_simp.score(x, y) #score on the whole dataset


#If the R^2 score is too low (<0.5) => Underfitting
#If the R^2 score is high on train_set (>0.8) but low on test set => Overfitting


#Calculate MSE and MAE
from sklearn.metrics import mean_squared_error, mean_absolute_error

mse = mean_squared_error(y_pred, y_test)
print(mse)
mae = mean_absolute_error(y_pred, y_test)
print(mae)


#Visualization
plt.scatter(y_pred, y_test)
plt.xlabel('Predicted values')
plt.ylabel('True values')
plt.plot([0, 10000], [0, 1000], '-', color='r') #reference lines
plt.show()
#If the scatter dots do not align or go along the reference lines => bad results


sbn.kdeplot(y_test, color='red', label='True values')
sbn.kdeplot(y_pred_test, color='green', label='Predict values')
plt.legend()
plt.show()
#If the kde plot of y_predic does not align well with y_true => bad results