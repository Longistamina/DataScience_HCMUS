bill = pd.read_csv('Data/bill_authentication.csv')

from sklearn.preprocessing import MinMaxScaler, FunctionTransformer
from sklearn.manifold import LocallyLinearEmbedding
from imblearn.pipeline import Pipeline

neighbor_lst = list(range(1, 26))
col = 3
row = (len(neighbor_lst)//col) if ( (len(neighbor_lst)%col) == 0) else ((len(neighbor_lst)//col) + 1)

plt.figure(figsize=(20,30))
plt.subplots_adjust(wspace=0.2, hspace=0.5)

for i in range(len(neighbor_lst)):
    lle_pipe = Pipeline([
        ('MinMaxScaler', MinMaxScaler()),
        ('LLE', LocallyLinearEmbedding(n_neighbors=neighbor_lst[i], n_components=3, random_state=1)) #n_components=3 means the transformed data will be 3-D
    ])

    try:
        lle_pipe.fit(admit.drop('admit', axis = 1))
    except Exception:
        plt.subplot(row, col, i+1)
        plt.title(f'N_Neighbors = {neighbor_lst[i]} is not possible', size = 15)
        continue
    
    #Create LLE reduced dataframe
    admit_lle = pd.DataFrame(
        lle_pipe.transform(admit.drop('admit', axis = 1)),
        columns = [f'PC{j+1}' for j in range(lle_pipe.named_steps['LLE'].n_components)]
    )    

    plt.subplot(row, col, i+1)
    sbn.scatterplot(data = admit_lle, x = 'PC1', y = 'PC2', edgecolors = 'black', hue = admit['admit'], palette = 'rainbow')
    plt.title(f'N_Neighbors = {neighbor_lst[i]}', size = 15)

plt.show()