import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.cluster import AgglomerativeClustering
from scipy.cluster.hierarchy import dendrogram, linkage
import seaborn as sbn

def plot_clustered_heatmap(data, model, title="Clustered Heatmap"):
    """
    Plots a clustered heatmap from AgglomerativeClustering outputs.

    Args:
        data: The original data (DataFrame or NumPy array).
        model: Fitted AgglomerativeClustering model.
        title: Title of the plot.
    """

    # Create linkage matrix
    counts = np.zeros(model.children_.shape[0])
    n_samples = len(model.labels_)
    for i, merge in enumerate(model.children_):
        current_count = 0
        for child_idx in merge:
            if child_idx < n_samples:
                current_count += 1
            else:
                current_count += counts[child_idx - n_samples]
        counts[i] = current_count

    linkage_matrix = np.column_stack(
        [model.children_, model.distances_, counts]
    ).astype(float)

    # Reorder the data based on clustering
    if isinstance(data, pd.DataFrame):
        ordered_indices = model.labels_
        ordered_data = data.iloc[np.argsort(ordered_indices)]
    else:
        ordered_indices = model.labels_
        ordered_data = data[np.argsort(ordered_indices)]

    # Plot the clustered heatmap
    fig = sbn.clustermap(ordered_data, row_linkage=linkage_matrix, col_cluster=False, figsize=(10, 8), cmap="viridis", cbar_pos=(0.02, 0.8, 0.03, 0.15))
    fig.ax_heatmap.set_title(title)
    plt.show()

# Example usage:
X = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [2, 1, 4, 3], [6, 5, 8, 7], [10, 9, 12, 11]])
df = pd.DataFrame(X, columns=['A', 'B', 'C', 'D']) # Create a DataFrame for better labeling.

model = AgglomerativeClustering(n_clusters = optimal_k, linkage='ward', compute_distances=True)
model = model.fit(df)

plot_clustered_heatmap(df, model, "Clustered Heatmap with Dendrogram")

#Example with numpy array.
model2 = AgglomerativeClustering(n_clusters = optimal_k, linkage='ward', compute_distances=True)
model2 = model2.fit(X)

plot_clustered_heatmap(X, model2, "Clustered Heatmap with Dendrogram (numpy)")